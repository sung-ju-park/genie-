{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPg8MFS6B7HBEFLC+lcTZ8w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sung-ju-park/genie-/blob/main/Untitled0.ipynb(%ED%81%AC%EB%A1%A4%EB%A7%81%20%EC%A7%80%EB%8B%88%EB%AE%A4%EC%A7%81%20%EC%9D%B8%EA%B8%B0%EC%B0%A8%ED%8A%B8)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**1. 크롤링과 스크레이핑**\n",
        "\n",
        "* 크롤링(Crawling) : 인터넷의 데이터를 활용하기 위해 정보들을 분석하고 활용할 수 있도록 수집하는 행위\n",
        "* 스크레이핑(Scraping) : 크롤링 + 데이터를 추출하고 가공하는 행위"
      ],
      "metadata": {
        "id": "DSMQ5eu2YTHr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2.Basic English Speaking**"
      ],
      "metadata": {
        "id": "zoERkabXYgZw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup"
      ],
      "metadata": {
        "id": "9E3TmlGma718"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "site = 'https://basicenglishspeaking.com/daily-english-conversation-topics/'\n",
        "request = requests.get(site)\n",
        "print(request)\n",
        "# print(request.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kVCzfkXqbCWh",
        "outputId": "94d47710-b350-4255-e519-f59b91defe78"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [200]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "soup = BeautifulSoup(request.text)\n"
      ],
      "metadata": {
        "id": "eqYsG7sUbZzz"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "divs = soup.find('div', {'class' :'thrv-columns'})\n",
        "print(divs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Hs3EIgycURX",
        "outputId": "757ad7c2-a5d5-469b-b06b-a7280e94bc1e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<div class=\"thrv_wrapper thrv-columns\" style=\"--tcb-col-el-width:792;\"><div class=\"tcb-flex-row tcb--cols--3\"><div class=\"tcb-flex-col\"><div class=\"tcb-col\"><div class=\"thrv_wrapper thrv_text_element\"><p>1. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/family/\" style=\"outline: none;\">Family</a><br/>2. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/restaurant/\" style=\"outline: none;\">Restaurant</a><br/>3. <a href=\"https://basicenglishspeaking.com/books/\">Books</a><br/>4. <a href=\"https://basicenglishspeaking.com/travel/\">Travel</a><br/>5. <a href=\"https://basicenglishspeaking.com/website/\">Website</a><br/>6. <a href=\"https://basicenglishspeaking.com/accident/\">Accident</a><br/>7. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/childhood-memory/\" style=\"outline: none;\">Childhood memory</a><br/>8. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/favorite-rooms/\" style=\"outline: none;\">Favorite rooms</a><br/>9. <a href=\"https://basicenglishspeaking.com/presents/\">Presents</a><br/>10. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/historical-place/\" style=\"outline: none;\">Historical place</a><br/>11. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/newspaper-magazine/\" style=\"outline: none;\">Newspaper/ Magazine</a><br/>12. <a href=\"https://basicenglishspeaking.com/an-event/\">A memorable event</a><br/>13. <a href=\"https://basicenglishspeaking.com/a-subject/\">A favorite subject</a><br/>14. <a href=\"https://basicenglishspeaking.com/a-museum/\">A museum</a><br/>15. <a href=\"https://basicenglishspeaking.com/a-movie/\">A favorite movie</a><br/>16. <a href=\"https://basicenglishspeaking.com/a-foreign-country/\">A foreign country</a><br/>17. <a href=\"https://basicenglishspeaking.com/parties/\">Parties</a><br/>18. <a href=\"https://basicenglishspeaking.com/a-teacher/\">A teacher</a><br/>19. <a href=\"https://basicenglishspeaking.com/a-friend/\">A friend</a><br/>20. <a href=\"https://basicenglishspeaking.com/a-hotel/\">A hotel</a><br/>21. <a href=\"https://basicenglishspeaking.com/a-letter/\">A letter</a><br/>22. <a href=\"https://basicenglishspeaking.com/hobbies/\">Hobbies</a><br/>23. <a href=\"https://basicenglishspeaking.com/music/\">Music</a><br/>24. <a href=\"https://basicenglishspeaking.com/shopping/\">Shopping</a><br/>25. <a href=\"https://basicenglishspeaking.com/holiday/\">Holiday</a></p></div></div></div><div class=\"tcb-flex-col\"><div class=\"tcb-col\"><div class=\"thrv_wrapper thrv_text_element\"><p>26. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/animals/\" style=\"outline: none;\">Animals</a><br/>27. <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/a-practical-skill/\" style=\"outline: none;\">A practical skill</a><br/>28. <a href=\"https://basicenglishspeaking.com/sports/\">Sport</a><br/>29. <a href=\"https://basicenglishspeaking.com/a-school/\">A School</a><br/>30. <a href=\"https://basicenglishspeaking.com/festival/\">Festival</a><br/>31. <a href=\"https://basicenglishspeaking.com/food/\">Food</a><br/>32. <a href=\"https://basicenglishspeaking.com/household-appliance/\">Household appliance</a><br/>33. <a href=\"https://basicenglishspeaking.com/a-music-band/\">A music band</a><br/>34. <a href=\"https://basicenglishspeaking.com/weather/\">Weather</a><br/>35. <a href=\"https://basicenglishspeaking.com/neighbor/\">Neighbor</a><br/>36. <a href=\"https://basicenglishspeaking.com/natural-scenery/\">Natural scenery</a><br/>37. <a href=\"https://basicenglishspeaking.com/outdoor-activities/\">Outdoor activities</a><br/>38. <a href=\"https://basicenglishspeaking.com/law/\">Law</a><br/>39. <a href=\"https://basicenglishspeaking.com/pollution/\">Pollution</a><br/>40. <a href=\"https://basicenglishspeaking.com/traffic-jam/\">Traffic jam</a><br/>41. <a href=\"https://basicenglishspeaking.com/tv-program/\">TV program</a><br/>42. <a href=\"https://basicenglishspeaking.com/architecture-building/\">Architect/ Building</a><br/>43. <a href=\"https://basicenglishspeaking.com/electronic-media/\">Electronic Media</a><br/>44. <a href=\"https://basicenglishspeaking.com/job-career/\">Job/ Career</a><br/>45. <a href=\"https://basicenglishspeaking.com/competition-contest/\">Competition/ contest</a><br/>46. <a href=\"https://basicenglishspeaking.com/a-garden/\">A garden</a><br/>47. <a href=\"https://basicenglishspeaking.com/hometown/\">Hometown</a><br/>48. <a href=\"https://basicenglishspeaking.com/clothing/\">Clothing</a><br/>49. <a href=\"https://basicenglishspeaking.com/an-advertisement/\">Advertisement</a><br/>50. <a href=\"https://basicenglishspeaking.com/a-project/\">A project</a></p></div></div></div><div class=\"tcb-flex-col\"><div class=\"tcb-col\"><div class=\"thrv_wrapper thrv_text_element\"><p>51. <a href=\"https://basicenglishspeaking.com/a-wedding/\">A wedding</a><br/>52. <a href=\"https://basicenglishspeaking.com/a-coffee-shop/\">A Coffee shop</a><br/>53. <a href=\"https://basicenglishspeaking.com/culture/\">Culture</a><br/>54. <a href=\"https://basicenglishspeaking.com/transport/\">Transport</a><br/>55. <a href=\"https://basicenglishspeaking.com/politician/\">Politician</a><br/>56. <a href=\"https://basicenglishspeaking.com/communication/\">Communication</a><br/>57. <a href=\"https://basicenglishspeaking.com/business/\">Business</a><br/>58. <a href=\"https://basicenglishspeaking.com/computer/\">Computer</a><br/>59. <a href=\"https://basicenglishspeaking.com/exercise/\">Exercise</a><br/>60. <a href=\"https://basicenglishspeaking.com/goal-ambition/\">Goal/ ambition</a><br/>61. <a href=\"https://basicenglishspeaking.com/art/\">Art</a><br/>62. <a href=\"https://basicenglishspeaking.com/fashion/\">Fashion</a><br/>63. <a href=\"https://basicenglishspeaking.com/jewelry/\">Jewelry</a><br/>64. <a href=\"https://basicenglishspeaking.com/cosmetic/\">Cosmetic</a><br/>65. <a href=\"https://basicenglishspeaking.com/indoor-game/\">Indoor Game</a><br/>66. <a href=\"https://basicenglishspeaking.com/phone-conversation/\">Phone conversation</a><br/>67. <a href=\"https://basicenglishspeaking.com/learning-second-language/\">Learning A Second language</a><br/>68. <a href=\"https://basicenglishspeaking.com/a-creative-person/\">A Creative Person</a><br/>69. <a href=\"https://basicenglishspeaking.com/a-celebrity/\">A celebrity</a><br/>70. <a href=\"https://basicenglishspeaking.com/a-health-problem/\">A Health Problem</a><br/>71. <a href=\"https://basicenglishspeaking.com/technological-advancements/\">Technological advancements</a><br/>72. <a href=\"https://basicenglishspeaking.com/a-landmark/\">A Landmark</a><br/>73. <a href=\"https://basicenglishspeaking.com/handcraft-items/\">Handcraft Items</a><br/>74. <a href=\"https://basicenglishspeaking.com/plastic-surgery/\">Plastic Surgery</a><br/>75. <a href=\"https://basicenglishspeaking.com/success/\">Success</a></p></div></div></div></div></div>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "links = divs.findAll('a')\n",
        "print(links)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pqDM4V6Addj8",
        "outputId": "f6751595-45a4-4a8a-c318-4b4b09a10c21"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[<a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/family/\" style=\"outline: none;\">Family</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/restaurant/\" style=\"outline: none;\">Restaurant</a>, <a href=\"https://basicenglishspeaking.com/books/\">Books</a>, <a href=\"https://basicenglishspeaking.com/travel/\">Travel</a>, <a href=\"https://basicenglishspeaking.com/website/\">Website</a>, <a href=\"https://basicenglishspeaking.com/accident/\">Accident</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/childhood-memory/\" style=\"outline: none;\">Childhood memory</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/favorite-rooms/\" style=\"outline: none;\">Favorite rooms</a>, <a href=\"https://basicenglishspeaking.com/presents/\">Presents</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/historical-place/\" style=\"outline: none;\">Historical place</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/newspaper-magazine/\" style=\"outline: none;\">Newspaper/ Magazine</a>, <a href=\"https://basicenglishspeaking.com/an-event/\">A memorable event</a>, <a href=\"https://basicenglishspeaking.com/a-subject/\">A favorite subject</a>, <a href=\"https://basicenglishspeaking.com/a-museum/\">A museum</a>, <a href=\"https://basicenglishspeaking.com/a-movie/\">A favorite movie</a>, <a href=\"https://basicenglishspeaking.com/a-foreign-country/\">A foreign country</a>, <a href=\"https://basicenglishspeaking.com/parties/\">Parties</a>, <a href=\"https://basicenglishspeaking.com/a-teacher/\">A teacher</a>, <a href=\"https://basicenglishspeaking.com/a-friend/\">A friend</a>, <a href=\"https://basicenglishspeaking.com/a-hotel/\">A hotel</a>, <a href=\"https://basicenglishspeaking.com/a-letter/\">A letter</a>, <a href=\"https://basicenglishspeaking.com/hobbies/\">Hobbies</a>, <a href=\"https://basicenglishspeaking.com/music/\">Music</a>, <a href=\"https://basicenglishspeaking.com/shopping/\">Shopping</a>, <a href=\"https://basicenglishspeaking.com/holiday/\">Holiday</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/animals/\" style=\"outline: none;\">Animals</a>, <a class=\"tve-froala\" href=\"https://basicenglishspeaking.com/a-practical-skill/\" style=\"outline: none;\">A practical skill</a>, <a href=\"https://basicenglishspeaking.com/sports/\">Sport</a>, <a href=\"https://basicenglishspeaking.com/a-school/\">A School</a>, <a href=\"https://basicenglishspeaking.com/festival/\">Festival</a>, <a href=\"https://basicenglishspeaking.com/food/\">Food</a>, <a href=\"https://basicenglishspeaking.com/household-appliance/\">Household appliance</a>, <a href=\"https://basicenglishspeaking.com/a-music-band/\">A music band</a>, <a href=\"https://basicenglishspeaking.com/weather/\">Weather</a>, <a href=\"https://basicenglishspeaking.com/neighbor/\">Neighbor</a>, <a href=\"https://basicenglishspeaking.com/natural-scenery/\">Natural scenery</a>, <a href=\"https://basicenglishspeaking.com/outdoor-activities/\">Outdoor activities</a>, <a href=\"https://basicenglishspeaking.com/law/\">Law</a>, <a href=\"https://basicenglishspeaking.com/pollution/\">Pollution</a>, <a href=\"https://basicenglishspeaking.com/traffic-jam/\">Traffic jam</a>, <a href=\"https://basicenglishspeaking.com/tv-program/\">TV program</a>, <a href=\"https://basicenglishspeaking.com/architecture-building/\">Architect/ Building</a>, <a href=\"https://basicenglishspeaking.com/electronic-media/\">Electronic Media</a>, <a href=\"https://basicenglishspeaking.com/job-career/\">Job/ Career</a>, <a href=\"https://basicenglishspeaking.com/competition-contest/\">Competition/ contest</a>, <a href=\"https://basicenglishspeaking.com/a-garden/\">A garden</a>, <a href=\"https://basicenglishspeaking.com/hometown/\">Hometown</a>, <a href=\"https://basicenglishspeaking.com/clothing/\">Clothing</a>, <a href=\"https://basicenglishspeaking.com/an-advertisement/\">Advertisement</a>, <a href=\"https://basicenglishspeaking.com/a-project/\">A project</a>, <a href=\"https://basicenglishspeaking.com/a-wedding/\">A wedding</a>, <a href=\"https://basicenglishspeaking.com/a-coffee-shop/\">A Coffee shop</a>, <a href=\"https://basicenglishspeaking.com/culture/\">Culture</a>, <a href=\"https://basicenglishspeaking.com/transport/\">Transport</a>, <a href=\"https://basicenglishspeaking.com/politician/\">Politician</a>, <a href=\"https://basicenglishspeaking.com/communication/\">Communication</a>, <a href=\"https://basicenglishspeaking.com/business/\">Business</a>, <a href=\"https://basicenglishspeaking.com/computer/\">Computer</a>, <a href=\"https://basicenglishspeaking.com/exercise/\">Exercise</a>, <a href=\"https://basicenglishspeaking.com/goal-ambition/\">Goal/ ambition</a>, <a href=\"https://basicenglishspeaking.com/art/\">Art</a>, <a href=\"https://basicenglishspeaking.com/fashion/\">Fashion</a>, <a href=\"https://basicenglishspeaking.com/jewelry/\">Jewelry</a>, <a href=\"https://basicenglishspeaking.com/cosmetic/\">Cosmetic</a>, <a href=\"https://basicenglishspeaking.com/indoor-game/\">Indoor Game</a>, <a href=\"https://basicenglishspeaking.com/phone-conversation/\">Phone conversation</a>, <a href=\"https://basicenglishspeaking.com/learning-second-language/\">Learning A Second language</a>, <a href=\"https://basicenglishspeaking.com/a-creative-person/\">A Creative Person</a>, <a href=\"https://basicenglishspeaking.com/a-celebrity/\">A celebrity</a>, <a href=\"https://basicenglishspeaking.com/a-health-problem/\">A Health Problem</a>, <a href=\"https://basicenglishspeaking.com/technological-advancements/\">Technological advancements</a>, <a href=\"https://basicenglishspeaking.com/a-landmark/\">A Landmark</a>, <a href=\"https://basicenglishspeaking.com/handcraft-items/\">Handcraft Items</a>, <a href=\"https://basicenglishspeaking.com/plastic-surgery/\">Plastic Surgery</a>, <a href=\"https://basicenglishspeaking.com/success/\">Success</a>]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for link in links:\n",
        "  print(link.text)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_xYjUo_geZQQ",
        "outputId": "f2229183-51c0-49aa-8bfb-6a4ef6c3a957"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Family\n",
            "Restaurant\n",
            "Books\n",
            "Travel\n",
            "Website\n",
            "Accident\n",
            "Childhood memory\n",
            "Favorite rooms\n",
            "Presents\n",
            "Historical place\n",
            "Newspaper/ Magazine\n",
            "A memorable event\n",
            "A favorite subject\n",
            "A museum\n",
            "A favorite movie\n",
            "A foreign country\n",
            "Parties\n",
            "A teacher\n",
            "A friend\n",
            "A hotel\n",
            "A letter\n",
            "Hobbies\n",
            "Music\n",
            "Shopping\n",
            "Holiday\n",
            "Animals\n",
            "A practical skill\n",
            "Sport\n",
            "A School\n",
            "Festival\n",
            "Food\n",
            "Household appliance\n",
            "A music band\n",
            "Weather\n",
            "Neighbor\n",
            "Natural scenery\n",
            "Outdoor activities\n",
            "Law\n",
            "Pollution\n",
            "Traffic jam\n",
            "TV program\n",
            "Architect/ Building\n",
            "Electronic Media\n",
            "Job/ Career\n",
            "Competition/ contest\n",
            "A garden\n",
            "Hometown\n",
            "Clothing\n",
            "Advertisement\n",
            "A project\n",
            "A wedding\n",
            "A Coffee shop\n",
            "Culture\n",
            "Transport\n",
            "Politician\n",
            "Communication\n",
            "Business\n",
            "Computer\n",
            "Exercise\n",
            "Goal/ ambition\n",
            "Art\n",
            "Fashion\n",
            "Jewelry\n",
            "Cosmetic\n",
            "Indoor Game\n",
            "Phone conversation\n",
            "Learning A Second language\n",
            "A Creative Person\n",
            "A celebrity\n",
            "A Health Problem\n",
            "Technological advancements\n",
            "A Landmark\n",
            "Handcraft Items\n",
            "Plastic Surgery\n",
            "Success\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "subject = []\n",
        "\n",
        "for link in links:\n",
        "  subject.append(link.text)"
      ],
      "metadata": {
        "id": "F2WHpw37eyQ2"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "subject"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSM_wp7GfCqE",
        "outputId": "ae0e90a5-5466-4365-d3cf-c61ff95b1624"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Family',\n",
              " 'Restaurant',\n",
              " 'Books',\n",
              " 'Travel',\n",
              " 'Website',\n",
              " 'Accident',\n",
              " 'Childhood memory',\n",
              " 'Favorite rooms',\n",
              " 'Presents',\n",
              " 'Historical place',\n",
              " 'Newspaper/ Magazine',\n",
              " 'A memorable event',\n",
              " 'A favorite subject',\n",
              " 'A museum',\n",
              " 'A favorite movie',\n",
              " 'A foreign country',\n",
              " 'Parties',\n",
              " 'A teacher',\n",
              " 'A friend',\n",
              " 'A hotel',\n",
              " 'A letter',\n",
              " 'Hobbies',\n",
              " 'Music',\n",
              " 'Shopping',\n",
              " 'Holiday',\n",
              " 'Animals',\n",
              " 'A practical skill',\n",
              " 'Sport',\n",
              " 'A School',\n",
              " 'Festival',\n",
              " 'Food',\n",
              " 'Household appliance',\n",
              " 'A music band',\n",
              " 'Weather',\n",
              " 'Neighbor',\n",
              " 'Natural scenery',\n",
              " 'Outdoor activities',\n",
              " 'Law',\n",
              " 'Pollution',\n",
              " 'Traffic jam',\n",
              " 'TV program',\n",
              " 'Architect/ Building',\n",
              " 'Electronic Media',\n",
              " 'Job/ Career',\n",
              " 'Competition/ contest',\n",
              " 'A garden',\n",
              " 'Hometown',\n",
              " 'Clothing',\n",
              " 'Advertisement',\n",
              " 'A project',\n",
              " 'A wedding',\n",
              " 'A Coffee shop',\n",
              " 'Culture',\n",
              " 'Transport',\n",
              " 'Politician',\n",
              " 'Communication',\n",
              " 'Business',\n",
              " 'Computer',\n",
              " 'Exercise',\n",
              " 'Goal/ ambition',\n",
              " 'Art',\n",
              " 'Fashion',\n",
              " 'Jewelry',\n",
              " 'Cosmetic',\n",
              " 'Indoor Game',\n",
              " 'Phone conversation',\n",
              " 'Learning A Second language',\n",
              " 'A\\xa0Creative Person',\n",
              " 'A celebrity',\n",
              " 'A Health Problem',\n",
              " 'Technological advancements',\n",
              " 'A Landmark',\n",
              " 'Handcraft Items',\n",
              " 'Plastic Surgery',\n",
              " 'Success']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(subject)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "plmgrzyrfD2i",
        "outputId": "7c77e3f7-b5b1-44a3-e6c8-e8cf7cf1e8eb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "75"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('총',len(subject),'개의 주제를 찾았습니다')\n",
        "for i in range(len(subject)):\n",
        "  print('{0:2d},{1:s}'.format(i+1,subject[i]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n3AO2ElyfI1w",
        "outputId": "5046518f-7147-4679-84a6-1f0ba517961e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "총 75 개의 주제를 찾았습니다\n",
            " 1,Family\n",
            " 2,Restaurant\n",
            " 3,Books\n",
            " 4,Travel\n",
            " 5,Website\n",
            " 6,Accident\n",
            " 7,Childhood memory\n",
            " 8,Favorite rooms\n",
            " 9,Presents\n",
            "10,Historical place\n",
            "11,Newspaper/ Magazine\n",
            "12,A memorable event\n",
            "13,A favorite subject\n",
            "14,A museum\n",
            "15,A favorite movie\n",
            "16,A foreign country\n",
            "17,Parties\n",
            "18,A teacher\n",
            "19,A friend\n",
            "20,A hotel\n",
            "21,A letter\n",
            "22,Hobbies\n",
            "23,Music\n",
            "24,Shopping\n",
            "25,Holiday\n",
            "26,Animals\n",
            "27,A practical skill\n",
            "28,Sport\n",
            "29,A School\n",
            "30,Festival\n",
            "31,Food\n",
            "32,Household appliance\n",
            "33,A music band\n",
            "34,Weather\n",
            "35,Neighbor\n",
            "36,Natural scenery\n",
            "37,Outdoor activities\n",
            "38,Law\n",
            "39,Pollution\n",
            "40,Traffic jam\n",
            "41,TV program\n",
            "42,Architect/ Building\n",
            "43,Electronic Media\n",
            "44,Job/ Career\n",
            "45,Competition/ contest\n",
            "46,A garden\n",
            "47,Hometown\n",
            "48,Clothing\n",
            "49,Advertisement\n",
            "50,A project\n",
            "51,A wedding\n",
            "52,A Coffee shop\n",
            "53,Culture\n",
            "54,Transport\n",
            "55,Politician\n",
            "56,Communication\n",
            "57,Business\n",
            "58,Computer\n",
            "59,Exercise\n",
            "60,Goal/ ambition\n",
            "61,Art\n",
            "62,Fashion\n",
            "63,Jewelry\n",
            "64,Cosmetic\n",
            "65,Indoor Game\n",
            "66,Phone conversation\n",
            "67,Learning A Second language\n",
            "68,A Creative Person\n",
            "69,A celebrity\n",
            "70,A Health Problem\n",
            "71,Technological advancements\n",
            "72,A Landmark\n",
            "73,Handcraft Items\n",
            "74,Plastic Surgery\n",
            "75,Success\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**3.다음 뉴스기사**"
      ],
      "metadata": {
        "id": "c-q3MXBOfZf2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# https://v.daum.net/v/20240520060022001\n",
        "# https://v.daum.net/v/20240520094402076\n",
        "# https://v.daum.net/v/20240520090140448\n",
        "\n",
        "def get_news_title(url):\n",
        "    response = requests.get(url)\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "        title = soup.find('h3', class_='tit_view').get_text()\n",
        "        return title\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 테스트 URL 리스트\n",
        "urls = [\n",
        "    \"https://v.daum.net/v/20240520060022001\",\n",
        "    \"https://v.daum.net/v/20240520094402076\",\n",
        "    \"https://v.daum.net/v/20240520090140448\"\n",
        "]\n",
        "\n",
        "# 각 URL에서 뉴스 제목을 가져오기\n",
        "news_titles = {}\n",
        "for url in urls:\n",
        "    news_id = url.split('/')[-1]\n",
        "    title = get_news_title(url)\n",
        "    news_titles[news_id] = title\n",
        "\n",
        "# 결과 출력\n",
        "for news_id, title in news_titles.items():\n",
        "    print(f\"News ID: {news_id} => Title: {title}\")"
      ],
      "metadata": {
        "id": "3Ia7g0jciiqD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "373d7101-6048-4ac0-efee-b86faf744a3c"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "News ID: 20240520060022001 => Title: 실전 배치 앞둔 레이저 무기...드론부터 전술핵까지 다 잡을 수 있나 [밀리터리 월드]\n",
            "News ID: 20240520094402076 => Title: \"전세사기 무서워\"…올해 전국 아파트 거래 비중 역대 최대\n",
            "News ID: 20240520090140448 => Title: 이창수 \"캐비넷 열어라\"…'문재인 일가' 수사, 집권 3년차에 본격화하나?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4.벅스 뮤직차트**"
      ],
      "metadata": {
        "id": "OyOf4dfblQTb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1위 Supernova - aespa\n",
        "# 2위 해야 - IVE\n",
        "def get_bugs_chart():\n",
        "    url = \"https://music.bugs.co.kr/chart\"\n",
        "    headers = {\n",
        "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n",
        "    }\n",
        "\n",
        "    response = requests.get(url, headers=headers)\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "        titles = [title.get_text().strip() for title in soup.select('p.title')]\n",
        "        artists = [artist.get_text().strip() for artist in soup.select('p.artist')]\n",
        "\n",
        "        chart = list(zip(range(1, 101), titles[:100], artists[:100]))\n",
        "\n",
        "        return chart\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 차트 데이터 가져오기\n",
        "bugs_chart = get_bugs_chart()\n",
        "\n",
        "if bugs_chart:\n",
        "    for rank, title, artist in bugs_chart:\n",
        "        print(f\"{rank}. {title} - {artist}\")\n",
        "else:\n",
        "    print(\"Failed to retrieve the chart.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VTCAxDIWl-R2",
        "outputId": "37c9d466-a25d-4850-e15f-881174502f0a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. Supernova - aespa\n",
            "2. 해야 (HEYA) - IVE (아이브)\n",
            "3. SPOT! (feat. JENNIE) - 지코 (ZICO)\n",
            "4. 소나기 - 이클립스 (ECLIPSE)\n",
            "5. 고민중독 - QWER\n",
            "6. Magnetic - 아일릿(ILLIT)\n",
            "7. 나는 아픈 건 딱 질색이니까 - (여자)아이들\n",
            "8. SHEESH - BABYMONSTER\n",
            "9. 첫 만남은 계획대로 되지 않아 - TWS (투어스)\n",
            "10. Accendio - IVE (아이브)\n",
            "11. Girls Never Die - tripleS (트리플에스)\n",
            "12. Welcome to the Show - DAY6 (데이식스)\n",
            "13. 미안해 미워해 사랑해 - Crush\n",
            "14. 한 페이지가 될 수 있게 - DAY6 (데이식스)\n",
            "15. Lucky Girl Syndrome - 아일릿(ILLIT)\n",
            "16. Run Run - 이클립스 (ECLIPSE)\n",
            "17. Midas Touch - KISS OF LIFE\n",
            "18. 밤양갱 - 비비(BIBI)\n",
            "19. 사랑과 우정사이 - 멜로망스(MeloMance)\n",
            "20. 에피소드 - 이무진\n",
            "21. MAESTRO - 세븐틴(SEVENTEEN)\n",
            "22. Hype Boy - NewJeans\n",
            "23. 그랬나봐 - 유회승 (엔플라잉)\n",
            "24. 예뻤어 - DAY6 (데이식스)\n",
            "25. ETA - NewJeans\n",
            "26. 천상연 - 이창섭\n",
            "27. Love wins all - 아이유(IU)\n",
            "28. Impossible - RIIZE\n",
            "29. Attention - NewJeans\n",
            "30. G.T.H.O. - PITTA (강형호)\n",
            "31. Ditto - NewJeans\n",
            "32. To. X - 태연 (TAEYEON)\n",
            "33. I AM - IVE (아이브)\n",
            "34. You & I - 이클립스 (ECLIPSE)\n",
            "35. Star - 엔플라잉(N.Flying)\n",
            "36. Siren - RIIZE\n",
            "37. Drama - aespa\n",
            "38. 만날테니까 - 이클립스 (ECLIPSE)\n",
            "39. 비의 랩소디 - 임재현\n",
            "40. Super Shy - NewJeans\n",
            "41. New Jeans - NewJeans\n",
            "42. EASY - LE SSERAFIM (르세라핌)\n",
            "43. OMG - NewJeans\n",
            "44. Smart - LE SSERAFIM (르세라핌)\n",
            "45. 봄눈 - 10CM\n",
            "46. Love 119 - RIIZE\n",
            "47. Discord - QWER\n",
            "48. 그대만 있다면 (여름날 우리 X 너드커넥션 (Nerd Connection)) - 너드커넥션(Nerd Connection)\n",
            "49. MANIAC - VIVIZ (비비지)\n",
            "50. I'll Be There - 이클립스 (ECLIPSE)\n",
            "51. HAPPY - DAY6 (데이식스)\n",
            "52. 홀씨 - 아이유(IU)\n",
            "53. Feel the POP - ZEROBASEONE (제로베이스원)\n",
            "54. 반딧불 (Little Light) - 도영 (DOYOUNG)\n",
            "55. Love me or Leave me - DAY6 (데이식스)\n",
            "56. Spicy - aespa\n",
            "57. By Your Side - Crush\n",
            "58. Perfect Night - LE SSERAFIM (르세라핌)\n",
            "59. Yes or No (Feat. 허윤진 of LE SSERAFIM, Crush) - 그루비룸 (GroovyRoom)\n",
            "60. 사랑인가 봐 - 멜로망스(MeloMance)\n",
            "61. 멈춰줘 - 헤이즈(Heize)\n",
            "62. Get A Guitar - RIIZE\n",
            "63. 꿈결같아서 - 민니 ((여자)아이들)\n",
            "64. 꿈 - 태연 (TAEYEON)\n",
            "65. 내 입술 따뜻한 커피처럼 - 조이 (JOY)\n",
            "\n",
            "\r\n",
            "조이 (JOY)\n",
            "66. 헤어지자 말해요 - 박재정\n",
            "67. 퀸카 (Queencard) - (여자)아이들\n",
            "68. After LIKE - IVE (아이브)\n",
            "69. Popcorn - 도경수(D.O.)\n",
            "70. 인사 - 범진\n",
            "71. Mars - 도경수(D.O.)\n",
            "72. 좋아해요 - 폴킴(Paul Kim)\n",
            "73. 사건의 지평선 - 윤하(Younha/ユンナ)\n",
            "74. 후라이의 꿈 - AKMU(악뮤)\n",
            "75. DASH - NMIXX\n",
            "76. Shopper - 아이유(IU)\n",
            "77. 그랬나봐 - 김형중\n",
            "78. Wife - (여자)아이들\n",
            "79. Dangerously - Charlie Puth(찰리 푸스)\n",
            "80. LOVE DIVE - IVE (아이브)\n",
            "81. 너의 모든 순간 - 성시경\n",
            "82. Love Lee - AKMU(악뮤)\n",
            "83. Steal The Show (From “엘리멘탈”) - Lauv(라우브)\n",
            "84. Seven (feat. Latto) - Clean Ver. - 정국\n",
            "85. 모든 날, 모든 순간 (Every day, Every Moment) - 폴킴(Paul Kim)\n",
            "86. 주저하는 연인들을 위해 - 잔나비\n",
            "87. 청춘찬가 - 세븐틴(SEVENTEEN)\n",
            "88. 자꾸만 웃게 돼 - 부석순(SEVENTEEN)\n",
            "89. I Don’t Think That I Like Her - Charlie Puth(찰리 푸스)\n",
            "90. Kitsch - IVE (아이브)\n",
            "91. 사랑은 늘 도망가 - 임영웅\n",
            "92. Wish You Hell - 웬디(WENDY)\n",
            "93. You & Me - 제니 (JENNIE)\n",
            "94. 숲 - 최유리\n",
            "95. 별 떨어진다 (I Do) - 도경수(D.O.)\n",
            "96. 관객이 될게 (I stan U) - 아이유(IU)\n",
            "97. Super Lady - (여자)아이들\n",
            "98. When I Get Old - Christopher(크리스토퍼)\n",
            "\n",
            "\r\n",
            "Christopher(크리스토퍼)\n",
            "99. 건물 사이에 피어난 장미 (Rose Blossom) - H1-KEY (하이키)\n",
            "100. Obsessed - Ayumu Imazu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "request = requests.get('https://music.bugs.co.kr/chart')\n",
        "soup = BeautifulSoup(request.text)"
      ],
      "metadata": {
        "id": "RiY1dFMZmx5I"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titles = soup.findAll('p',{'class':'title'})\n",
        "# print(titles)\n",
        "artists = soup.findAll('p',{'class':'artist'})\n",
        "# print(artists)\n"
      ],
      "metadata": {
        "id": "HJiWifQwsWPE"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i, (t,a) in enumerate(zip(titles,artists)):\n",
        "  title = t.text.strip()\n",
        "  artist = a.text.strip().split('\\n')[0]\n",
        "  print('{0:3d}위.{1:s}-{2:s}'.format(i+1,title,artist))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "03Rlxsd4scnC",
        "outputId": "2d988b4f-8ecb-4d71-bd8e-6cce9b7d8b3b"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  1위.Supernova-aespa\n",
            "  2위.해야 (HEYA)-IVE (아이브)\n",
            "  3위.SPOT! (feat. JENNIE)-지코 (ZICO)\n",
            "  4위.소나기-이클립스 (ECLIPSE)\n",
            "  5위.고민중독-QWER\n",
            "  6위.Magnetic-아일릿(ILLIT)\n",
            "  7위.나는 아픈 건 딱 질색이니까-(여자)아이들\n",
            "  8위.SHEESH-BABYMONSTER\n",
            "  9위.첫 만남은 계획대로 되지 않아-TWS (투어스)\n",
            " 10위.Accendio-IVE (아이브)\n",
            " 11위.Girls Never Die-tripleS (트리플에스)\n",
            " 12위.Welcome to the Show-DAY6 (데이식스)\n",
            " 13위.미안해 미워해 사랑해-Crush\n",
            " 14위.한 페이지가 될 수 있게-DAY6 (데이식스)\n",
            " 15위.Lucky Girl Syndrome-아일릿(ILLIT)\n",
            " 16위.Run Run-이클립스 (ECLIPSE)\n",
            " 17위.Midas Touch-KISS OF LIFE\n",
            " 18위.밤양갱-비비(BIBI)\n",
            " 19위.사랑과 우정사이-멜로망스(MeloMance)\n",
            " 20위.에피소드-이무진\n",
            " 21위.MAESTRO-세븐틴(SEVENTEEN)\n",
            " 22위.Hype Boy-NewJeans\n",
            " 23위.그랬나봐-유회승 (엔플라잉)\n",
            " 24위.예뻤어-DAY6 (데이식스)\n",
            " 25위.ETA-NewJeans\n",
            " 26위.천상연-이창섭\n",
            " 27위.Love wins all-아이유(IU)\n",
            " 28위.Impossible-RIIZE\n",
            " 29위.Attention-NewJeans\n",
            " 30위.G.T.H.O.-PITTA (강형호)\n",
            " 31위.Ditto-NewJeans\n",
            " 32위.To. X-태연 (TAEYEON)\n",
            " 33위.I AM-IVE (아이브)\n",
            " 34위.You & I-이클립스 (ECLIPSE)\n",
            " 35위.Star-엔플라잉(N.Flying)\n",
            " 36위.Siren-RIIZE\n",
            " 37위.Drama-aespa\n",
            " 38위.만날테니까-이클립스 (ECLIPSE)\n",
            " 39위.비의 랩소디-임재현\n",
            " 40위.Super Shy-NewJeans\n",
            " 41위.New Jeans-NewJeans\n",
            " 42위.EASY-LE SSERAFIM (르세라핌)\n",
            " 43위.OMG-NewJeans\n",
            " 44위.Smart-LE SSERAFIM (르세라핌)\n",
            " 45위.봄눈-10CM\n",
            " 46위.Love 119-RIIZE\n",
            " 47위.Discord-QWER\n",
            " 48위.그대만 있다면 (여름날 우리 X 너드커넥션 (Nerd Connection))-너드커넥션(Nerd Connection)\n",
            " 49위.MANIAC-VIVIZ (비비지)\n",
            " 50위.I'll Be There-이클립스 (ECLIPSE)\n",
            " 51위.HAPPY-DAY6 (데이식스)\n",
            " 52위.홀씨-아이유(IU)\n",
            " 53위.Feel the POP-ZEROBASEONE (제로베이스원)\n",
            " 54위.반딧불 (Little Light)-도영 (DOYOUNG)\n",
            " 55위.Love me or Leave me-DAY6 (데이식스)\n",
            " 56위.Spicy-aespa\n",
            " 57위.By Your Side-Crush\n",
            " 58위.Perfect Night-LE SSERAFIM (르세라핌)\n",
            " 59위.Yes or No (Feat. 허윤진 of LE SSERAFIM, Crush)-그루비룸 (GroovyRoom)\n",
            " 60위.사랑인가 봐-멜로망스(MeloMance)\n",
            " 61위.멈춰줘-헤이즈(Heize)\n",
            " 62위.Get A Guitar-RIIZE\n",
            " 63위.꿈결같아서-민니 ((여자)아이들)\n",
            " 64위.꿈-태연 (TAEYEON)\n",
            " 65위.내 입술 따뜻한 커피처럼-조이 (JOY)\n",
            " 66위.헤어지자 말해요-박재정\n",
            " 67위.퀸카 (Queencard)-(여자)아이들\n",
            " 68위.After LIKE-IVE (아이브)\n",
            " 69위.Popcorn-도경수(D.O.)\n",
            " 70위.인사-범진\n",
            " 71위.Mars-도경수(D.O.)\n",
            " 72위.좋아해요-폴킴(Paul Kim)\n",
            " 73위.사건의 지평선-윤하(Younha/ユンナ)\n",
            " 74위.후라이의 꿈-AKMU(악뮤)\n",
            " 75위.DASH-NMIXX\n",
            " 76위.Shopper-아이유(IU)\n",
            " 77위.그랬나봐-김형중\n",
            " 78위.Wife-(여자)아이들\n",
            " 79위.Dangerously-Charlie Puth(찰리 푸스)\n",
            " 80위.LOVE DIVE-IVE (아이브)\n",
            " 81위.너의 모든 순간-성시경\n",
            " 82위.Love Lee-AKMU(악뮤)\n",
            " 83위.Steal The Show (From “엘리멘탈”)-Lauv(라우브)\n",
            " 84위.Seven (feat. Latto) - Clean Ver.-정국\n",
            " 85위.모든 날, 모든 순간 (Every day, Every Moment)-폴킴(Paul Kim)\n",
            " 86위.주저하는 연인들을 위해-잔나비\n",
            " 87위.청춘찬가-세븐틴(SEVENTEEN)\n",
            " 88위.자꾸만 웃게 돼-부석순(SEVENTEEN)\n",
            " 89위.I Don’t Think That I Like Her-Charlie Puth(찰리 푸스)\n",
            " 90위.Kitsch-IVE (아이브)\n",
            " 91위.사랑은 늘 도망가-임영웅\n",
            " 92위.Wish You Hell-웬디(WENDY)\n",
            " 93위.You & Me-제니 (JENNIE)\n",
            " 94위.숲-최유리\n",
            " 95위.별 떨어진다 (I Do)-도경수(D.O.)\n",
            " 96위.관객이 될게 (I stan U)-아이유(IU)\n",
            " 97위.Super Lady-(여자)아이들\n",
            " 98위.When I Get Old-Christopher(크리스토퍼)\n",
            " 99위.건물 사이에 피어난 장미 (Rose Blossom)-H1-KEY (하이키)\n",
            "100위.Obsessed-Ayumu Imazu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**5.멜론**"
      ],
      "metadata": {
        "id": "vIjhsQzxtKfg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "request = requests.get('https://www.melon.com/chart/index.htm')\n",
        "soup = BeautifulSoup(request.text)\n",
        "print(request)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Isrn8OVLwWu4",
        "outputId": "de788bea-ec44-4370-fb78-afb8922c849d"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [406]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* robots.txt : 웹 사이트에 크롤러같은 로봇들의 접근을 제어하기 위한 규약(권고안이라 지켜야 할 의무는 없음)"
      ],
      "metadata": {
        "id": "LGCxagPdwdHV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# user agent:\n",
        "# Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n",
        "header = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}\n",
        "request = requests.get('https://www.melon.com/chart/index.htm', headers=header)\n",
        "print(request)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HC5wkJf9wfyH",
        "outputId": "ac46aa17-0ceb-47b3-f430-b77648d02bf5"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [200]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "soup = BeautifulSoup(request.text)"
      ],
      "metadata": {
        "id": "SPN4yXGl07_u"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titles = soup.findAll('div', {'class':'rank01'})\n",
        "artists = soup.findAll('span',{'class':'checkEllipsis'})"
      ],
      "metadata": {
        "id": "JOAj8OQx0_1i"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i, (t,a) in enumerate(zip(titles,artists)):\n",
        "  title = t.text.strip()\n",
        "  artist = a.text.strip()\n",
        "  print('{0:3d}위.{1:s}-{2:s}'.format(i+1,title,artist))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KlyuziGI3VBG",
        "outputId": "af442334-48b2-4cd3-e880-73ce743c2574"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  1위.Supernova-aespa\n",
            "  2위.SPOT! (feat. JENNIE)-지코 (ZICO)\n",
            "  3위.해야 (HEYA)-IVE (아이브)\n",
            "  4위.Magnetic-아일릿(ILLIT)\n",
            "  5위.고민중독-QWER\n",
            "  6위.나는 아픈 건 딱 질색이니까-(여자)아이들\n",
            "  7위.미안해 미워해 사랑해-Crush\n",
            "  8위.소나기-이클립스 (ECLIPSE)\n",
            "  9위.첫 만남은 계획대로 되지 않아-TWS (투어스)\n",
            " 10위.천상연-이창섭\n",
            " 11위.SHEESH-BABYMONSTER\n",
            " 12위.사랑은 늘 도망가-임영웅\n",
            " 13위.한 페이지가 될 수 있게-DAY6 (데이식스)\n",
            " 14위.예뻤어-DAY6 (데이식스)\n",
            " 15위.밤양갱-비비 (BIBI)\n",
            " 16위.우리들의 블루스-임영웅\n",
            " 17위.온기-임영웅\n",
            " 18위.Love wins all-아이유\n",
            " 19위.모래 알갱이-임영웅\n",
            " 20위.Home-임영웅\n",
            " 21위.다시 만날 수 있을까-임영웅\n",
            " 22위.MAESTRO-세븐틴 (SEVENTEEN)\n",
            " 23위.Do or Die-임영웅\n",
            " 24위.이제 나만 믿어요-임영웅\n",
            " 25위.London Boy-임영웅\n",
            " 26위.무지개-임영웅\n",
            " 27위.비의 랩소디-임재현\n",
            " 28위.에피소드-이무진\n",
            " 29위.Polaroid-임영웅\n",
            " 30위.인생찬가-임영웅\n",
            " 31위.To. X-태연 (TAEYEON)\n",
            " 32위.연애편지-임영웅\n",
            " 33위.그대만 있다면 (여름날 우리 X 너드커넥션 (Nerd Connection))-너드커넥션 (Nerd Connection)\n",
            " 34위.Hype Boy-NewJeans\n",
            " 35위.EASY-LE SSERAFIM (르세라핌)\n",
            " 36위.Seven (feat. Latto) - Clean Ver.-정국\n",
            " 37위.Drama-aespa\n",
            " 38위.I AM-IVE (아이브)\n",
            " 39위.Welcome to the Show-DAY6 (데이식스)\n",
            " 40위.Smart-LE SSERAFIM (르세라핌)\n",
            " 41위.보금자리-임영웅\n",
            " 42위.헤어지자 말해요-박재정\n",
            " 43위.Lucky Girl Syndrome-아일릿(ILLIT)\n",
            " 44위.ETA-NewJeans\n",
            " 45위.Super Shy-NewJeans\n",
            " 46위.WAY 4 LUV-PLAVE\n",
            " 47위.Love 119-RIIZE\n",
            " 48위.Perfect Night-LE SSERAFIM (르세라핌)\n",
            " 49위.사랑인가 봐-멜로망스\n",
            " 50위.인사-범진\n",
            " 51위.파이팅 해야지 (Feat. 이영지)-부석순 (SEVENTEEN)\n",
            " 52위.Ditto-NewJeans\n",
            " 53위.Midas Touch-KISS OF LIFE\n",
            " 54위.너의 모든 순간-성시경\n",
            " 55위.MANIAC-VIVIZ (비비지)\n",
            " 56위.Spicy-aespa\n",
            " 57위.그랬나봐-유회승 (엔플라잉)\n",
            " 58위.손오공-세븐틴 (SEVENTEEN)\n",
            " 59위.사랑과 우정사이-멜로망스\n",
            " 60위.슬픈 초대장-순순희 (지환)\n",
            " 61위.홀씨-아이유\n",
            " 62위.청춘찬가-세븐틴 (SEVENTEEN)\n",
            " 63위.꿈-태연 (TAEYEON)\n",
            " 64위.퀸카 (Queencard)-(여자)아이들\n",
            " 65위.사막에서 꽃을 피우듯-우디 (Woody)\n",
            " 66위.Dynamite-방탄소년단\n",
            " 67위.우리 영화-PLAVE\n",
            " 68위.봄날-방탄소년단\n",
            " 69위.Impossible-RIIZE\n",
            " 70위.Attention-NewJeans\n",
            " 71위.Love Lee-AKMU (악뮤)\n",
            " 72위.Get A Guitar-RIIZE\n",
            " 73위.OMG-NewJeans\n",
            " 74위.주저하는 연인들을 위해-잔나비\n",
            " 75위.From-PLAVE\n",
            " 76위.LOVE DIVE-IVE (아이브)\n",
            " 77위.Watch Me Woo!-PLAVE\n",
            " 78위.사건의 지평선-윤하 (YOUNHA)\n",
            " 79위.취중고백-김민석\n",
            " 80위.버추얼 아이돌-PLAVE\n",
            " 81위.Baddie-IVE (아이브)\n",
            " 82위.모든 날, 모든 순간 (Every day, Every Moment)-폴킴\n",
            " 83위.Accendio-IVE (아이브)\n",
            " 84위.Siren-RIIZE\n",
            " 85위.어떻게 이별까지 사랑하겠어, 널 사랑하는 거지-AKMU (악뮤)\n",
            " 86위.잘 지내자, 우리 (여름날 우리 X 로이킴)-로이킴\n",
            " 87위.I Don't Think That I Like Her-Charlie Puth\n",
            " 88위.그대가 내 안에 박혔다(그내박)-순순희(기태)\n",
            " 89위.청혼하지 않을 이유를 못 찾았어-이무진\n",
            " 90위.봄눈-10CM\n",
            " 91위.다정히 내 이름을 부르면-경서예지, 전건호\n",
            " 92위.You & Me-제니 (JENNIE)\n",
            " 93위.Super Lady-(여자)아이들\n",
            " 94위.사랑하지 않아서 그랬어-임한별\n",
            " 95위.심(心)-DK(디셈버)\n",
            " 96위.음악의 신-세븐틴 (SEVENTEEN)\n",
            " 97위.Girls Never Die-tripleS (트리플에스)\n",
            " 98위.혹시 세상에 혼자 남겨진 것 같다면-우디 (Woody)\n",
            " 99위.멈춰줘-헤이즈 (Heize)\n",
            "100위.Kitsch-IVE (아이브)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def get_melon_chart():\n",
        "    url = \"https://www.melon.com/chart/index.htm\"\n",
        "    headers = {\n",
        "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n",
        "    }\n",
        "\n",
        "    response = requests.get(url, headers=headers)\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "        titles = [title.get_text().strip() for title in soup.select('div.ellipsis.rank01 > span > a')]\n",
        "        artists = [artist.get_text().strip() for artist in soup.select('div.ellipsis.rank02 > a')]\n",
        "\n",
        "        chart = list(zip(range(1, 101), titles[:100], artists[:100]))\n",
        "\n",
        "        return chart\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 차트 데이터 가져오기\n",
        "melon_chart = get_melon_chart()\n",
        "\n",
        "if melon_chart:\n",
        "    for rank, title, artist in melon_chart:\n",
        "        print(f\"{rank}. {title} - {artist}\")\n",
        "else:\n",
        "    print(\"Failed to retrieve the chart.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-840QRLwhyM",
        "outputId": "9845d2a2-a85a-4b53-cb17-9c43cc109ce7"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. Supernova - aespa\n",
            "2. SPOT! (feat. JENNIE) - 지코 (ZICO)\n",
            "3. 해야 (HEYA) - IVE (아이브)\n",
            "4. Magnetic - 아일릿(ILLIT)\n",
            "5. 고민중독 - QWER\n",
            "6. 나는 아픈 건 딱 질색이니까 - (여자)아이들\n",
            "7. 미안해 미워해 사랑해 - Crush\n",
            "8. 소나기 - 이클립스 (ECLIPSE)\n",
            "9. 첫 만남은 계획대로 되지 않아 - TWS (투어스)\n",
            "10. 천상연 - 이창섭\n",
            "11. SHEESH - BABYMONSTER\n",
            "12. 사랑은 늘 도망가 - 임영웅\n",
            "13. 한 페이지가 될 수 있게 - DAY6 (데이식스)\n",
            "14. 예뻤어 - DAY6 (데이식스)\n",
            "15. 밤양갱 - 비비 (BIBI)\n",
            "16. 우리들의 블루스 - 임영웅\n",
            "17. 온기 - 임영웅\n",
            "18. Love wins all - 아이유\n",
            "19. 모래 알갱이 - 임영웅\n",
            "20. Home - 임영웅\n",
            "21. 다시 만날 수 있을까 - 임영웅\n",
            "22. MAESTRO - 세븐틴 (SEVENTEEN)\n",
            "23. Do or Die - 임영웅\n",
            "24. 이제 나만 믿어요 - 임영웅\n",
            "25. London Boy - 임영웅\n",
            "26. 무지개 - 임영웅\n",
            "27. 비의 랩소디 - 임재현\n",
            "28. 에피소드 - 이무진\n",
            "29. Polaroid - 임영웅\n",
            "30. 인생찬가 - 임영웅\n",
            "31. To. X - 태연 (TAEYEON)\n",
            "32. 연애편지 - 임영웅\n",
            "33. 그대만 있다면 (여름날 우리 X 너드커넥션 (Nerd Connection)) - 너드커넥션 (Nerd Connection)\n",
            "34. Hype Boy - NewJeans\n",
            "35. EASY - LE SSERAFIM (르세라핌)\n",
            "36. Seven (feat. Latto) - Clean Ver. - 정국\n",
            "37. Drama - aespa\n",
            "38. I AM - IVE (아이브)\n",
            "39. Welcome to the Show - DAY6 (데이식스)\n",
            "40. Smart - LE SSERAFIM (르세라핌)\n",
            "41. 보금자리 - 임영웅\n",
            "42. 헤어지자 말해요 - 박재정\n",
            "43. Lucky Girl Syndrome - 아일릿(ILLIT)\n",
            "44. ETA - NewJeans\n",
            "45. Super Shy - NewJeans\n",
            "46. WAY 4 LUV - PLAVE\n",
            "47. Love 119 - RIIZE\n",
            "48. Perfect Night - LE SSERAFIM (르세라핌)\n",
            "49. 사랑인가 봐 - 멜로망스\n",
            "50. 인사 - 범진\n",
            "51. 파이팅 해야지 (Feat. 이영지) - 부석순 (SEVENTEEN)\n",
            "52. Ditto - NewJeans\n",
            "53. Midas Touch - KISS OF LIFE\n",
            "54. 너의 모든 순간 - 성시경\n",
            "55. MANIAC - VIVIZ (비비지)\n",
            "56. Spicy - aespa\n",
            "57. 그랬나봐 - 유회승 (엔플라잉)\n",
            "58. 손오공 - 세븐틴 (SEVENTEEN)\n",
            "59. 사랑과 우정사이 - 멜로망스\n",
            "60. 슬픈 초대장 - 순순희 (지환)\n",
            "61. 홀씨 - 아이유\n",
            "62. 청춘찬가 - 세븐틴 (SEVENTEEN)\n",
            "63. 꿈 - 태연 (TAEYEON)\n",
            "64. 퀸카 (Queencard) - (여자)아이들\n",
            "65. 사막에서 꽃을 피우듯 - 우디 (Woody)\n",
            "66. Dynamite - 방탄소년단\n",
            "67. 우리 영화 - PLAVE\n",
            "68. 봄날 - 방탄소년단\n",
            "69. Impossible - RIIZE\n",
            "70. Attention - NewJeans\n",
            "71. Love Lee - AKMU (악뮤)\n",
            "72. Get A Guitar - RIIZE\n",
            "73. OMG - NewJeans\n",
            "74. 주저하는 연인들을 위해 - 잔나비\n",
            "75. From - PLAVE\n",
            "76. LOVE DIVE - IVE (아이브)\n",
            "77. Watch Me Woo! - PLAVE\n",
            "78. 사건의 지평선 - 윤하 (YOUNHA)\n",
            "79. 취중고백 - 김민석\n",
            "80. 버추얼 아이돌 - PLAVE\n",
            "81. Baddie - IVE (아이브)\n",
            "82. 모든 날, 모든 순간 (Every day, Every Moment) - 폴킴\n",
            "83. Accendio - IVE (아이브)\n",
            "84. Siren - RIIZE\n",
            "85. 어떻게 이별까지 사랑하겠어, 널 사랑하는 거지 - AKMU (악뮤)\n",
            "86. 잘 지내자, 우리 (여름날 우리 X 로이킴) - 로이킴\n",
            "87. I Don't Think That I Like Her - Charlie Puth\n",
            "88. 그대가 내 안에 박혔다(그내박) - 순순희(기태)\n",
            "89. 청혼하지 않을 이유를 못 찾았어 - 이무진\n",
            "90. 봄눈 - 10CM\n",
            "91. 다정히 내 이름을 부르면 - 경서예지\n",
            "92. You & Me - 전건호\n",
            "93. Super Lady - 제니 (JENNIE)\n",
            "94. 사랑하지 않아서 그랬어 - (여자)아이들\n",
            "95. 심(心) - 임한별\n",
            "96. 음악의 신 - DK(디셈버)\n",
            "97. Girls Never Die - 세븐틴 (SEVENTEEN)\n",
            "98. 혹시 세상에 혼자 남겨진 것 같다면 - tripleS (트리플에스)\n",
            "99. 멈춰줘 - 우디 (Woody)\n",
            "100. Kitsch - 헤이즈 (Heize)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**6.네이버 증권**"
      ],
      "metadata": {
        "id": "OznPerWjw42Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# https://finance.naver.com/item/main.naver?code=053950\n",
        "# https://finance.naver.com/item/main.naver?code=252670\n",
        "# 이름, 가격, 종목코드, 거래량\n",
        "# {'name': '경남제약','price':'1545', 'code':'053950', 'volumn':'1825697'}\n",
        "site = 'https://finance.naver.com/item/main.naver?code=053950'\n",
        "request = requests.get(site)\n",
        "print(request)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ZeO5j0I33ci",
        "outputId": "046dfb2f-da4a-42e4-aa94-6f53ad9b09a2"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<Response [200]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "soup = BeautifulSoup(request.text)"
      ],
      "metadata": {
        "id": "drTdak17-zw_"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "div_totalinfo = soup.find('div', {'class':'new_totalinfo'})\n",
        "# print(div_totalinfo)"
      ],
      "metadata": {
        "id": "Mh5LBHT9AOD1"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "name = div_totalinfo.find('h2').text\n",
        "print(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2DFASb9iAe01",
        "outputId": "87274d08-a055-422e-cf12-f9f6aafa94c8"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "경남제약\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "div_today = div_totalinfo.find('div',{'class':'today'})\n",
        "# print(div_today)\n",
        "\n",
        "price = div_today.find('span',{'class':'blind'}).text\n",
        "print(price)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oI7Ph3PxAvXT",
        "outputId": "aca9be17-792f-4205-f292-55a0bd5b342f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1,543\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "div_description = div_totalinfo.find('div',{'class':'description'})\n",
        "\n",
        "code = div_description.find('span',{'class':'code'}).text\n",
        "print(code)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8foDlRb-C11v",
        "outputId": "6d231ee9-a64c-4bec-a7b4-cb51e68bae6e"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "053950\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "table_no_info = soup.find('table',{'class':'no_info'})\n",
        "# print(table_no_info)\n",
        "\n",
        "tds = table_no_info.findAll('td')\n",
        "# print(tds)\n",
        "\n",
        "volume = tds[2].find('span',{'class':'blind'}).text\n",
        "print(volume)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S7vcI7bgBWXT",
        "outputId": "caf1e785-22df-49c8-ad72-230750bc4585"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "18,510,865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dic = {'name':name, 'code':code, 'price':price, 'volume':volume}"
      ],
      "metadata": {
        "id": "Q67G5dZXB0yG"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(dic)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yzcBn33RCsSX",
        "outputId": "55b8e2b8-71d3-43e9-d42e-48927028987a"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': '경남제약', 'code': '053950', 'price': '1,543', 'volume': '18,510,865'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def naver_finance(code):\n",
        "  site = f'https://finance.naver.com/item/main.naver?code={code}'\n",
        "  request = requests.get(site)\n",
        "\n",
        "  soup = BeautifulSoup(request.text)\n",
        "  div_totalinfo = soup.find('div', {'class':'new_totalinfo'})\n",
        "  name = div_totalinfo.find('h2').text\n",
        "  div_today = div_totalinfo.find('div',{'class':'today'})\n",
        "  price = div_today.find('span',{'class':'blind'}).text\n",
        "  table_no_info = soup.find('table',{'class':'no_info'})\n",
        "  tds = table_no_info.findAll('td')\n",
        "  volume = tds[2].find('span',{'class':'blind'}).text\n",
        "  dic = {'name':name, 'code':code, 'price':price, 'volume':volume}\n",
        "  return dic\n"
      ],
      "metadata": {
        "id": "5-h8BFEFCt_c"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "naver_finance('053950')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AYzviPqkD_Py",
        "outputId": "d8929c13-3a07-47cf-e74c-33d14699439e"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': '경남제약', 'code': '053950', 'price': '1,528', 'volume': '18,605,328'}"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "codes = ['053950', '032800', '001440','005930','003230']\n",
        "data = []\n",
        "\n",
        "for code in codes:\n",
        "  dic = naver_finance(code)\n",
        "  data.append(dic)\n",
        "\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-pfeQjo8EDfb",
        "outputId": "b4e5d1ef-ea73-4862-90b6-e3f1c83f5a87"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'name': '경남제약', 'code': '053950', 'price': '1,528', 'volume': '18,626,234'}, {'name': '판타지오', 'code': '032800', 'price': '230', 'volume': '24,347,484'}, {'name': '대한전선', 'code': '001440', 'price': '19,470', 'volume': '22,584,888'}, {'name': '삼성전자', 'code': '005930', 'price': '78,400', 'volume': '10,206,373'}, {'name': '삼양식품', 'code': '003230', 'price': '510,000', 'volume': '545,575'}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n"
      ],
      "metadata": {
        "id": "MqnZVnKYEhpC"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(data)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "_hdOhYSGE0G6",
        "outputId": "b62a0d5d-5afb-4bf1-a6b0-cfe00acd9f55"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   name    code    price      volume\n",
              "0  경남제약  053950    1,528  18,626,234\n",
              "1  판타지오  032800      230  24,347,484\n",
              "2  대한전선  001440   19,470  22,584,888\n",
              "3  삼성전자  005930   78,400  10,206,373\n",
              "4  삼양식품  003230  510,000     545,575"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59c68168-9a40-42c2-80f8-fd1b63ec5657\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>code</th>\n",
              "      <th>price</th>\n",
              "      <th>volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>경남제약</td>\n",
              "      <td>053950</td>\n",
              "      <td>1,528</td>\n",
              "      <td>18,626,234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>판타지오</td>\n",
              "      <td>032800</td>\n",
              "      <td>230</td>\n",
              "      <td>24,347,484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>대한전선</td>\n",
              "      <td>001440</td>\n",
              "      <td>19,470</td>\n",
              "      <td>22,584,888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>삼성전자</td>\n",
              "      <td>005930</td>\n",
              "      <td>78,400</td>\n",
              "      <td>10,206,373</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>삼양식품</td>\n",
              "      <td>003230</td>\n",
              "      <td>510,000</td>\n",
              "      <td>545,575</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59c68168-9a40-42c2-80f8-fd1b63ec5657')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59c68168-9a40-42c2-80f8-fd1b63ec5657 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59c68168-9a40-42c2-80f8-fd1b63ec5657');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-45a87ef5-d728-4559-b393-77d8de7bb428\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45a87ef5-d728-4559-b393-77d8de7bb428')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-45a87ef5-d728-4559-b393-77d8de7bb428 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_83cbfd5a-3aeb-4655-b1c5-5ed9705e5919\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_83cbfd5a-3aeb-4655-b1c5-5ed9705e5919 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\ud310\\ud0c0\\uc9c0\\uc624\",\n          \"\\uc0bc\\uc591\\uc2dd\\ud488\",\n          \"\\ub300\\ud55c\\uc804\\uc120\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"032800\",\n          \"003230\",\n          \"001440\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"230\",\n          \"510,000\",\n          \"19,470\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"volume\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"24,347,484\",\n          \"545,575\",\n          \"22,584,888\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_excel('naver_finance.xlsx')"
      ],
      "metadata": {
        "id": "FBamD6bBE3Vb"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###과제\n",
        "* 지니뮤직 ('https://www.genie.co.kr/chart/top200')\n",
        "- https://www.genie.co.kr/chart/top200?ditc=D&ymd=20240520&hh=12&rtm=Y&pg=1\n",
        "- https://www.genie.co.kr/chart/top200?ditc=D&ymd=20240520&hh=12&rtm=Y&pg=2\n",
        "- 둘이 합쳐서 1-100위 까지 음악차트 만들기"
      ],
      "metadata": {
        "id": "gT0QvQRoFAel"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "\n",
        "def get_genie_chart(url):\n",
        "    headers = {\n",
        "        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n",
        "    }\n",
        "\n",
        "    response = requests.get(url, headers=headers)\n",
        "    if response.status_code == 200:\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "        titles = [title.get_text().strip() for title in soup.select('a.title.ellipsis')]\n",
        "        artists = [artist.get_text().strip() for artist in soup.select('a.artist.ellipsis')]\n",
        "\n",
        "        chart = list(zip(titles, artists))\n",
        "\n",
        "        return chart\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 지니 차트 URL 리스트\n",
        "urls = [\n",
        "    \"https://www.genie.co.kr/chart/top200?ditc=D&ymd=20240520&hh=12&rtm=Y&pg=1\",\n",
        "    \"https://www.genie.co.kr/chart/top200?ditc=D&ymd=20240520&hh=12&rtm=Y&pg=2\"\n",
        "]\n",
        "\n",
        "# 각 URL에서 음악 차트를 가져오기\n",
        "charts = []\n",
        "for url in urls:\n",
        "    chart = get_genie_chart(url)\n",
        "    if chart:\n",
        "        charts.extend(chart)\n",
        "\n",
        "# 데이터프레임 생성\n",
        "df = pd.DataFrame(charts, columns=['Title', 'Artist'])\n",
        "df['Rank'] = range(1, len(df) + 1)\n",
        "\n",
        "# 제목과 아티스트를 결합\n",
        "df['Title'] = df['Title'] + ' - ' + df['Artist']\n",
        "\n",
        "# 필요없는 열 제거\n",
        "df = df[['Rank', 'Title']]\n",
        "\n",
        "# pandas 출력 옵션 설정\n",
        "pd.set_option('display.max_rows', 100)\n",
        "\n",
        "# 결과 출력\n",
        "for index, row in df.iterrows():\n",
        "    print(f\"{row['Rank']}. {row['Title']}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yNPcBKx0FXdL",
        "outputId": "7b9503c5-c4b8-4f66-8dbd-d0ab7e208277"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1. SPOT! (Feat. JENNIE) - 지코 (ZICO)\n",
            "2. Supernova - aespa\n",
            "3. 해야 (HEYA) - IVE (아이브)\n",
            "4. Magnetic - 아일릿 (ILLIT)\n",
            "5. 고민중독 - QWER\n",
            "6. 나는 아픈 건 딱 질색이니까 - 지코 (ZICO)\n",
            "7. 소나기 - aespa\n",
            "8. 첫 만남은 계획대로 되지 않아 - IVE (아이브)\n",
            "9. 천상연 - 아일릿 (ILLIT)\n",
            "10. 미안해 미워해 사랑해 - QWER\n",
            "11. 예뻤어 - (여자)아이들\n",
            "12. SHEESH - 이클립스 (ECLIPSE)\n",
            "13. 한 페이지가 될 수 있게 - TWS (투어스)\n",
            "14. 밤양갱 - 이창섭\n",
            "15. 비의 랩소디 - Crush\n",
            "16. 에피소드 - DAY6 (데이식스)\n",
            "17. Love wins all - BABYMONSTER\n",
            "18. Ditto - DAY6 (데이식스)\n",
            "19. 사랑은 늘 도망가 - 비비 (BIBI)\n",
            "20. Drama - 임재현\n",
            "21. To. X - 이무진\n",
            "22. 헤어지자 말해요 - 아이유 (IU)\n",
            "23. Welcome to the Show - NewJeans\n",
            "24. I AM - 임영웅\n",
            "25. Hype Boy - aespa\n",
            "26. 그대만 있다면 (여름날 우리 X 너드커넥션 (Nerd Connection)) - 태연 (TAEYEON)\n",
            "27. 우리들의 블루스 - 박재정\n",
            "28. 이제 나만 믿어요 - DAY6 (데이식스)\n",
            "29. EASY - IVE (아이브)\n",
            "30. 청혼하지 않을 이유를 못 찾았어 - NewJeans\n",
            "31. 온기 - 너드커넥션 (Nerd Connection)\n",
            "32. 사건의 지평선 - 임영웅\n",
            "33. Love Lee - 임영웅\n",
            "34. 다시 만날 수 있을까 - LE SSERAFIM (르세라핌)\n",
            "35. 그랬나봐 - 이무진\n",
            "36. ETA - 임영웅\n",
            "37. 슬픈 초대장 - 윤하 (YOUNHA)\n",
            "38. 모래 알갱이 - AKMU (악뮤)\n",
            "39. 사랑인가 봐 - 임영웅\n",
            "40. Home - 유회승 (엔플라잉)\n",
            "41. Run Run - NewJeans\n",
            "42. 무지개 - 순순희 (지환)\n",
            "43. Super Shy - 임영웅\n",
            "44. I Don't Think That I Like Her - 멜로망스 (MeloMance)\n",
            "45. 심 (心) - 임영웅\n",
            "46. 인사 - 이클립스 (ECLIPSE)\n",
            "47. 홀씨 - 임영웅\n",
            "48. London Boy - NewJeans\n",
            "49. MAESTRO - Charlie Puth\n",
            "50. Attention - DK (디셈버)\n",
            "51. 후라이의 꿈 - 지코 (ZICO)\n",
            "52. 너의 모든 순간 - aespa\n",
            "53. Perfect Night - IVE (아이브)\n",
            "54. 퀸카 (Queencard) - 아일릿 (ILLIT)\n",
            "55. Smart - QWER\n",
            "56. 사막에서 꽃을 피우듯 - AKMU (악뮤)\n",
            "57. Do or Die - 성시경\n",
            "58. MANIAC - LE SSERAFIM (르세라핌)\n",
            "59. Polaroid - (여자)아이들\n",
            "60. 물론 - LE SSERAFIM (르세라핌)\n",
            "61. Seven (Feat. Latto) (Clean Ver.) - 우디 (Woody)\n",
            "62. Discord - 임영웅\n",
            "63. Dangerously - VIVIZ (비비지)\n",
            "64. 인생찬가 - 임영웅\n",
            "65. 연애편지 - 허각\n",
            "66. Love 119 - 정국\n",
            "67. 사랑과 우정사이 - QWER\n",
            "68. You & Me - Charlie Puth\n",
            "69. 보금자리 - 임영웅\n",
            "70. 그대가 내 안에 박혔다 (그내박) - 임영웅\n",
            "71. 혹시 세상에 혼자 남겨진 것 같다면 - RIIZE\n",
            "72. After LIKE - 멜로망스 (MeloMance)\n",
            "73. 다정히 내 이름을 부르면 - 제니 (JENNIE)\n",
            "74. LOVE DIVE - 임영웅\n",
            "75. OMG - 순순희 (기태)\n",
            "76. 주저하는 연인들을 위해 - 우디 (Woody)\n",
            "77. Kitsch - IVE (아이브)\n",
            "78. Spicy - 경서예지 & 전건호\n",
            "79. 멈춰줘 - IVE (아이브)\n",
            "80. Lucky Girl Syndrome - NewJeans\n",
            "81. Accendio - 잔나비\n",
            "82. 건물 사이에 피어난 장미 - IVE (아이브)\n",
            "83. Baddie - aespa\n",
            "84. 영원 - 헤이즈 (Heize)\n",
            "85. 봄눈 - 아일릿 (ILLIT)\n",
            "86. Midas Touch - IVE (아이브)\n",
            "87. 잘 지내자, 우리 (여름날 우리 X 로이킴) - H1-KEY (하이키)\n",
            "88. Stay - IVE (아이브)\n",
            "89. 꿈 - DK (디셈버)\n",
            "90. Star - 10CM\n",
            "91. You & I - KISS OF LIFE\n",
            "92. When I Get Old - 로이킴\n",
            "93. 파이팅 해야지 (Feat. 이영지) - The Kid LAROI & Justin Bieber\n",
            "94. 취중고백 - 태연 (TAEYEON)\n",
            "95. Girls Never Die - 엔플라잉 (N.Flying)\n",
            "96. 모든 날, 모든 순간 (Every day, Every Moment) - 이클립스 (ECLIPSE)\n",
            "97. 어떻게 이별까지 사랑하겠어, 널 사랑하는 거지 - Christopher & 청하\n",
            "98. 사랑하지 않아서 그랬어 - 부석순 (SEVENTEEN)\n",
            "99. 2002 - 김민석\n",
            "100. Super Lady - tripleS (트리플에스)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lWxc6-YHYAEG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}